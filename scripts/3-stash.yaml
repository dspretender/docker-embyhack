version: '3'

# silent: true

includes:
  variables: ./variables.yaml

tasks:
  stash:
    desc: "Step 3: Stash original files (JS and DLLs)."
    vars:
      PATH_OUTPUT: "{{.PATH_OUTPUT}}"

      # Staging directory for intermediate stashing
      PATH_STAGING: "{{.PATH_OUTPUT}}.staging"
      PATH_STAGING_DLL: "{{.PATH_STAGING}}/dll"
      PATH_STAGING_IL: "{{.PATH_STAGING}}/il"
      PATH_STAGING_JS: "{{.PATH_STAGING}}/js"
    status:
      # Check if the final output directory exists to determine if the task needs to run
      - test -d {{.PATH_OUTPUT}}
    cmds:
      - echo "--- [Step 3] Stashing Originals DLLs ---"
      # Clean up any previous staging directory
      - rm -rf {{.PATH_STAGING}}

      - |
        # Create staging directories for stashed JS
        mkdir -p {{.PATH_STAGING_JS}}
        echo "Stashing original JavaScript files..."
        # Iterate through target JS files and copy them to the staging area
        for js_file in {{.EMBY_TARGET_JS}}; do
          mkdir -p "{{.PATH_STAGING_JS}}/$(dirname $js_file)"
          cp "{{.PATH_EMBY_SYSTEM}}/$js_file" "{{.PATH_STAGING_JS}}/$js_file"
        done

      - |
        echo "Stashing original DLLs..."
        # Iterate through target DLL files, copy them to staging
        mkdir -p {{.PATH_STAGING_DLL}}
        for dll_file in {{.EMBY_TARGET_DLL}}; do
          cp "{{.PATH_EMBY_SYSTEM}}/$dll_file" "{{.PATH_STAGING_DLL}}/"

          base_name=${dll_file%.dll}
          # for debug only
          mkdir -p "{{.PATH_STAGING_IL}}/$base_name"
          {{.COMMAND_DECOMPILE_DLL}} -out="{{.PATH_STAGING_IL}}/$base_name/$base_name.il" "{{.PATH_STAGING_DLL}}/$dll_file"
        done

      # Move the completed staging directory to the final output directory
      - mv {{.PATH_STAGING}} {{.PATH_OUTPUT}}
      - echo "âœ… Step 3 complete."
