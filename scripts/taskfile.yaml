version: '3'

# ---
# Taskfile for building a modified Emby Server package.
#
# This script automates the process of downloading a specific Emby Server version,
# decompiling certain DLLs, applying custom modifications to the source (IL and JS),
# and then recompiling and packaging the final result.
#
# Main commands:
#   - task: Runs the entire build process.
#   - task clean: Removes all build artifacts.
#   - task install_on_ubuntu: Installs all required dependencies on a fresh Ubuntu system.
# ---

vars:
  # --- Internal Paths & Commands ---
  # These variables define the directory structure and commands for the build process.
  # They are less likely to be changed by the user.
  PATH_TMP:
    sh: realpath .
  PATH_BIN: "{{.PATH_TMP}}/bin"
  PATH_NODE: "{{.TASKFILE_DIR}}/node"
  PATH_DIST_TEMPLATE: "{{.TASKFILE_DIR}}/dist-template"
  PATH_BUILD_ROOT: "{{.PATH_TMP}}/build"
  PATH_STEP_DOWNLOAD: "{{.PATH_BUILD_ROOT}}/1-download"
  PATH_STEP_UNPACK: "{{.PATH_BUILD_ROOT}}/2-unpack"
  PATH_STEP_DECOMPILE: "{{.PATH_BUILD_ROOT}}/3-decompile"
  PATH_STEP_EDIT: "{{.PATH_BUILD_ROOT}}/4-edit"
  PATH_STEP_BUILD: "{{.PATH_BUILD_ROOT}}/5-build"
  PATH_DIST: "{{.PATH_BUILD_ROOT}}/dist"
  COMMAND_COMPILE_DLL: "{{.PATH_BIN}}/ilasm -quiet -dll "
  COMMAND_DECOMPILE_DLL: "{{.PATH_BIN}}/ildasm -all -typelist -metadata=raw "
  COMMAND_COPY_RECURSIVE: "rsync -av -q "

env:
  # --- User Configuration ---
  # Expose configuration variables as environment variables for use in scripts.
  EMBY_VERSION: "4.8.11.0"
  EMBY_REPLACEMENT_URL: "https://mb3admin.megm.workers.dev/"

  # Derived environment variables
  EMBY_PACKAGE: "emby-server-deb_{{.EMBY_VERSION}}_amd64.deb"
  EMBY_DOWNLOAD_URL: "https://github.com/MediaBrowser/Emby.Releases/releases/download/{{.EMBY_VERSION}}/{{.EMBY_PACKAGE}}"
  EMBY_TARGET_DLL: "Emby.Server.Implementations.dll Emby.Web.dll"
  EMBY_TARGET_JS: "dashboard-ui/embypremiere/embypremiere.js dashboard-ui/modules/emby-apiclient/connectionmanager.js"
  EMBY_TARGET_URL: "https://mb3admin.com/admin/service/registration/validateDevice https://mb3admin.com/admin/service/registration/validate https://mb3admin.com/admin/service/appstore/register https://mb3admin.com/admin/service/registration/getStatus"
  NVM_DIR: "{{.HOME}}/.nvm"
  NVM_SH: "{{.NVM_DIR}}/nvm.sh"

tasks:
  # --- Main Build Process Tasks ---

  default:
    desc: "Runs the entire build process from start to finish (alias for 'all')."
    cmds:
      - task: all

  all:
    desc: "Runs all build steps in order, creating the final distributable package."
    deps: [dist]
    cmds:
      - |
        echo "✅ Build process completed successfully!"
        echo "The final output package is in: {{.PATH_DIST}}"

  dist:
    desc: "Packages the final build into the 'dist' directory."
    deps: [build]
    vars:
      PATH_INPUT: "{{.PATH_STEP_BUILD}}"
      PATH_OUTPUT: "{{.PATH_DIST}}"
    cmds:
      - rm -rf "{{.PATH_OUTPUT}}"
      - '{{.COMMAND_COPY_RECURSIVE}} "{{.PATH_INPUT}}/" "{{.PATH_OUTPUT}}/"'

  build:
    desc: "Step 5: Assembles the final package from modified and recompiled files."
    deps: [edit]
    vars:
      PATH_INPUT: "{{.PATH_STEP_EDIT}}"
      PATH_OUTPUT: "{{.PATH_STEP_BUILD}}"
      PATH_STAGING: "{{.PATH_OUTPUT}}.staging"
    status:
      - test -d {{.PATH_OUTPUT}}
    cmds:
      - echo "--- [Step 5] Building Final Package ---"
      - rm -rf {{.PATH_STAGING}}
      - |
        # Create staging directory
        mkdir -p {{.PATH_STAGING}}/system/
        cd {{.PATH_STAGING}}

        # Copy template files (e.g., docker-compose.yml) to the staging area
        echo "Copying output template files..."
        rsync -a {{.PATH_DIST_TEMPLATE}}/ {{.PATH_STAGING}}/

        # Copy the modified and recompiled files into the staging area
        echo "Copying modified DLL and JS files..."
        {{.COMMAND_COPY_RECURSIVE}} "{{.PATH_INPUT}}/dll/" "{{.PATH_STAGING}}/system/"
        {{.COMMAND_COPY_RECURSIVE}} "{{.PATH_INPUT}}/js/" "{{.PATH_STAGING}}/system/"

        # Build the custom crypto.js polyfill and place it in the correct location
        echo "Building and placing crypto.js..."
        bash -c '. {{.NVM_SH}} && cd {{.PATH_NODE}} && pnpm run build:crypto'
        polyfil_path="{{.PATH_STAGING}}/system/dashboard-ui/modules/polyfills"
        mkdir -p "$polyfil_path"
        cp "{{.PATH_NODE}}/dist/crypto.js" "$polyfil_path/crypto.js"

        # Dynamically update docker-compose.yml to mount all modified files as volumes
        echo "Updating docker-compose.yml with volume mappings for modified files..."
        cd {{.PATH_STAGING}} && for file in $(find system -type f); do
          file=$file yq e '.services.emby.volumes += ("./" + env(file) + ":/app/emby/" + env(file) + ":ro")' -i docker-compose.yml
        done
      - mv {{.PATH_STAGING}} {{.PATH_OUTPUT}}
      - echo "✅ Step 5 complete."

  edit:
    desc: "Step 4: Modifies decompiled IL files and JS, then recompiles DLLs."
    deps: [decompile]
    vars:
      PATH_INPUT: "{{.PATH_STEP_DECOMPILE}}"
      PATH_OUTPUT: "{{.PATH_STEP_EDIT}}"
      PATH_STAGING: "{{.PATH_OUTPUT}}.staging"
      PATH_STAGING_DLL: "{{.PATH_STAGING}}/dll"
      PATH_STAGING_IL: "{{.PATH_STAGING}}/il"
      PATH_STAGING_JS: "{{.PATH_STAGING}}/js"
    status:
      - test -d {{.PATH_OUTPUT}}
    cmds:
      - echo "--- [Step 4] Editing and Recompiling Files ---"
      - rm -rf {{.PATH_STAGING}}
      - '{{.COMMAND_COPY_RECURSIVE}} {{.PATH_INPUT}}/ {{.PATH_STAGING}}/'
      - |
        # Preprocess IL files to prepare them for modification
        echo "Preprocessing IL files..."
        for il_file in $(find {{.PATH_STAGING_IL}} -type f -name "*.il"); do
          echo "Preprocessing $il_file..."
          bash -c '. {{.NVM_SH}} && cd {{.PATH_NODE}} && pnpm run preprocess-il "$0" "$1"' "$il_file" "$il_file.PREPROCESSED"
          mv "$il_file.PREPROCESSED" "$il_file"
        done
      - |
        # Apply edits to the IL files (e.g., URL replacements)
        echo "Editing IL files..."
        target_il_files=$(find {{.PATH_STAGING_IL}} -type f -exec grep -l "mb3admin" {} +)
        for target_file in $target_il_files; do
          echo "Editing $target_file..."
          bash -c '. {{.NVM_SH}} && cd {{.PATH_NODE}} && pnpm run edit "$0" "$1"' "$target_file" "$target_file.EDIT"
          if [ -f "$target_file.EDIT" ]; then mv "$target_file.EDIT" "$target_file"; fi
        done
      - |
        # Recompile the modified IL files back into DLLs
        echo "Recompiling DLLs..."
        for dll_file in {{.EMBY_TARGET_DLL}}; do
          echo "Recompiling $dll_file..."
          base_name=${dll_file%.dll}
          {{.COMMAND_COMPILE_DLL}} "{{.PATH_STAGING_IL}}/$base_name/$base_name.il" -out="{{.PATH_STAGING_DLL}}/$dll_file"
        done
      - |
        # Apply edits to the JavaScript files
        echo "Editing JS files..."
        target_js_files=$(find {{.PATH_STAGING_JS}} -type f -name "*.js")
        for target_file in $target_js_files; do
          echo "Editing $target_file..."
          bash -c '. {{.NVM_SH}} && cd {{.PATH_NODE}} && pnpm run edit "$0" "$1"' "$target_file" "$target_file.EDIT"
          if [ -f "$target_file.EDIT" ]; then mv "$target_file.EDIT" "$target_file"; fi
        done
      - mv {{.PATH_STAGING}} {{.PATH_OUTPUT}}
      - echo "✅ Step 4 complete."

  decompile:
    desc: "Step 3: Decompiles target DLLs into IL and stashes original JS files."
    deps: [unpack]
    vars:
      PATH_SYSTEM: "opt/emby-server/system"
      PATH_INPUT: "{{.PATH_STEP_UNPACK}}"
      PATH_OUTPUT: "{{.PATH_STEP_DECOMPILE}}"
      PATH_STAGING: "{{.PATH_OUTPUT}}.staging"
      PATH_STAGING_DLL: "{{.PATH_STAGING}}/dll"
      PATH_STAGING_IL: "{{.PATH_STAGING}}/il"
      PATH_STAGING_JS: "{{.PATH_STAGING}}/js"
    status:
      - test -d {{.PATH_OUTPUT}}
    cmds:
      - echo "--- [Step 3] Stashing Originals and Decompiling DLLs ---"
      - rm -rf {{.PATH_STAGING}}
      - |
        # Copy the target JavaScript files from the unpacked source to a staging area
        mkdir -p {{.PATH_STAGING_JS}}
        echo "Stashing original JavaScript files..."
        for js_file in {{.EMBY_TARGET_JS}}; do
          mkdir -p "{{.PATH_STAGING_JS}}/$(dirname $js_file)"
          cp "{{.PATH_INPUT}}/{{.PATH_SYSTEM}}/$js_file" "{{.PATH_STAGING_JS}}/$js_file"
        done
      - |
        # Copy the target DLLs to a staging area and then decompile them into IL
        echo "Stashing original DLLs and decompiling them into Intermediate Language (IL)..."
        mkdir -p {{.PATH_STAGING_DLL}}
        for dll_file in {{.EMBY_TARGET_DLL}}; do
          # Stash the original DLL
          cp "{{.PATH_INPUT}}/{{.PATH_SYSTEM}}/$dll_file" "{{.PATH_STAGING_DLL}}/"
          # Decompile the stashed DLL
          base_name=${dll_file%.dll}
          mkdir -p "{{.PATH_STAGING_IL}}/$base_name"
          {{.COMMAND_DECOMPILE_DLL}} -out="{{.PATH_STAGING_IL}}/$base_name/$base_name.il" "{{.PATH_STAGING_DLL}}/$dll_file"
        done
      - mv {{.PATH_STAGING}} {{.PATH_OUTPUT}}
      - echo "✅ Step 3 complete."

  unpack:
    desc: "Step 2: Unpacks the downloaded Emby server Debian package."
    deps: [download]
    vars:
      PATH_INPUT: "{{.PATH_STEP_DOWNLOAD}}"
      PATH_OUTPUT: "{{.PATH_STEP_UNPACK}}"
      PATH_STAGING: "{{.PATH_OUTPUT}}.staging"
    status:
      - test -d {{.PATH_OUTPUT}}
    cmds:
      - echo "--- [Step 2] Unpacking Emby ---"
      - rm -rf {{.PATH_STAGING}}
      - mkdir {{.PATH_STAGING}}
      - dpkg-deb -R "{{.PATH_INPUT}}/{{.EMBY_PACKAGE}}" "{{.PATH_STAGING}}"
      - mv "{{.PATH_STAGING}}" "{{.PATH_OUTPUT}}"
      - echo "✅ Step 2 complete."

  download:
    desc: "Step 1: Downloads the specified Emby server Debian package."
    deps: [prepare]
    vars:
      PATH_OUTPUT: "{{.PATH_STEP_DOWNLOAD}}"
      PATH_STAGING: "{{.PATH_OUTPUT}}.staging"
    status:
      - test -d {{.PATH_OUTPUT}}
    cmds:
      - echo "--- [Step 1] Downloading Emby ---"
      - rm -rf {{.PATH_STAGING}}
      - mkdir -p {{.PATH_STAGING}}
      - curl -o "{{.PATH_STAGING}}/{{.EMBY_PACKAGE}}" -L --fail "{{.EMBY_DOWNLOAD_URL}}"
      - mv "{{.PATH_STAGING}}" "{{.PATH_OUTPUT}}"
      - echo "✅ Step 1 complete."

  prepare:
    desc: "Step 0: Prepares the build environment, checking and installing dependencies."
    cmds:
      - echo "--- [Step 0] Preparing Environment ---"
      - rm -rf "{{.PATH_BUILD_ROOT}}/*.staging"
      - task: install_ilasm
      - task: install_ildasm
      - task: _check_system_deps
      - echo "Installing Node.js dependencies..."
      - bash -c '. {{.NVM_SH}} && cd {{.PATH_NODE}} && pnpm install'
      - echo "✅ Preparation complete."

  # --- Cleanup Task ---

  clean:
    desc: "Removes all build artifacts, including build/, dist/, and bin/ directories."
    cmds:
      - echo "Cleaning up build artifacts..."
      - rm -rf "{{.PATH_BUILD_ROOT}}"
      - rm -rf "{{.PATH_BIN}}"
      - echo "✅ Cleanup complete."

  # --- Utility Tasks for System Setup ---

  install_on_ubuntu:
    desc: "Installs all required system dependencies on a fresh Ubuntu system."
    deps:
      - install_yq_on_ubuntu
      - install_rsync_on_ubuntu
      - install_curl_on_ubuntu
      - install_unzip_on_ubuntu
      - install_dotnet_sdk_on_ubuntu
      - install_nvm_on_ubuntu
      - install_node_on_ubuntu
      - install_pnpm_on_ubuntu
    cmds:
      - echo "--- All System Dependencies for Ubuntu are installed or checked ---"
      - echo "✅ All dependencies installed successfully."
      - echo "👉 Remember to restart your terminal or run '. ~/.nvm/nvm.sh' to use nvm, node, and pnpm interactively if you just installed nvm."

  install_yq_on_ubuntu:
    desc: "Installs yq (YAML processor) on Ubuntu if not present."
    status:
      - command -v yq
    cmds:
      - echo "--- Installing yq ---"
      - sudo curl -L "https://github.com/mikefarah/yq/releases/download/v4.45.2/yq_linux_amd64" -o /usr/local/bin/yq
      - sudo chmod +x /usr/local/bin/yq
      - echo "✅ yq installed successfully."

  install_rsync_on_ubuntu:
    desc: "Installs rsync on Ubuntu if not present."
    status:
      - command -v rsync
    cmds:
      - echo "--- Installing rsync ---"
      - sudo apt-get update
      - sudo apt-get install -y rsync
      - echo "✅ rsync installed successfully."

  install_curl_on_ubuntu:
    desc: "Installs curl on Ubuntu if not present."
    status:
      - command -v curl
    cmds:
      - echo "--- Installing curl ---"
      - sudo apt-get update
      - sudo apt-get install -y curl
      - echo "✅ curl installed successfully."

  install_unzip_on_ubuntu:
    desc: "Installs unzip on Ubuntu if not present."
    status:
      - command -v unzip
    cmds:
      - echo "--- Installing unzip ---"
      - sudo apt-get update
      - sudo apt-get install -y unzip
      - echo "✅ unzip installed successfully."

  install_dotnet_sdk_on_ubuntu:
    desc: "Installs .NET SDK 8.0 on Ubuntu if not present."
    status:
      - command -v dotnet && dotnet --list-sdks | grep "8.0."
    cmds:
      - echo "--- Installing .NET SDK 8.0 ---"
      - sudo apt-get update
      - sudo apt-get install -y dotnet-sdk-8.0
      - echo "✅ .NET SDK 8.0 installed successfully."

  install_nvm_on_ubuntu:
    desc: "Installs Node Version Manager (nvm) on Ubuntu if not present."
    status:
      - test -f "{{.NVM_DIR}}/nvm.sh"
    cmds:
      - echo "--- Installing nvm ---"
      - curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.3/install.sh | bash
      - echo "✅ nvm installed successfully."
      - echo "👉 Please restart your terminal or run '. ~/.nvm/nvm.sh' to use nvm interactively."

  install_node_on_ubuntu:
    desc: "Installs Node.js v22 using nvm on Ubuntu if not present."
    status:
      - bash -c '. {{.NVM_SH}} && nvm list | grep "v22"'
    cmds:
      - echo "--- Installing Node.js v22 ---"
      - bash -c '. {{.NVM_SH}} && nvm install 22'
      - echo "✅ Node.js v22 installed successfully."

  install_pnpm_on_ubuntu:
    desc: "Ensures pnpm is installed globally via npm (which should be managed by nvm)."
    status:
      - bash -c '. {{.NVM_SH}} && npm list -g pnpm >/dev/null'
    cmds:
      - echo "--- Installing pnpm ---"
      - bash -c '. {{.NVM_SH}} && npm install -g pnpm'
      - echo "✅ pnpm installed successfully."

  # --- Helper & Internal Tool Installation Tasks ---

  install_ildasm:
    desc: "Installs ildasm (IL Disassembler) if it is not already present in ./bin."
    status:
      - test -f {{.PATH_BIN}}/ildasm
    cmds:
      - task: _install_tool
        vars: {name: 'ildasm', version: '9.0.7', url: "https://www.nuget.org/api/v2/package/runtime.linux-x64.Microsoft.NETCore.ILDAsm/9.0.7"}

  install_ilasm:
    desc: "Installs ilasm (IL Assembler) if it is not already present in ./bin."
    status:
      - test -f {{.PATH_BIN}}/ilasm
    cmds:
      - task: _install_tool
        vars: {name: 'ilasm', version: '9.0.7', url: "https://www.nuget.org/api/v2/package/runtime.linux-x64.Microsoft.NETCore.ILAsm/9.0.7"}

  _check_system_deps:
    internal: true
    desc: "Internal: Checks for required system dependencies and guides installation."
    status:
      - command -v dotnet >/dev/null 2>&1
      - command -v rsync >/dev/null 2>&1
      - command -v yq >/dev/null 2>&1
      - command -v curl >/dev/null 2>&1
      - command -v unzip >/dev/null 2>&1
      - test -f "{{.NVM_DIR}}/nvm.sh" >/dev/null 2>&1
      - bash -c '. {{.NVM_SH}} && command -v node >/dev/null 2>&1'
      - bash -c '. {{.NVM_SH}} && command -v pnpm >/dev/null 2>&1'
    cmds:
      - |
        echo "Checking for system dependencies..."
        RED='\033[31m'; GREEN='\033[32m'; BOLD='\033[1m'; RESET='\033[0m'
        missing_deps=()
        install_commands=()
        check_dep() {
          local dep_name="$1"; local check_cmd="$2"; local install_task="$3"
          if ! eval "$check_cmd" >/dev/null 2>&1; then
            missing_deps+=("$dep_name")
            install_commands+=("./task.sh $install_task")
          fi
        }
        check_dep "dotnet" "command -v dotnet" "install_dotnet_sdk_on_ubuntu"
        check_dep "rsync" "command -v rsync" "install_rsync_on_ubuntu"
        check_dep "yq" "command -v yq" "install_yq_on_ubuntu"
        check_dep "curl" "command -v curl" "install_curl_on_ubuntu"
        check_dep "unzip" "command -v unzip" "install_unzip_on_ubuntu"
        check_dep "nvm" "test -f \"{{.NVM_DIR}}/nvm.sh\"" "install_nvm_on_ubuntu"
        check_dep "node" "bash -c '. {{.NVM_SH}} && command -v node'" "install_node_on_ubuntu"
        check_dep "pnpm" "bash -c '. {{.NVM_SH}} && command -v pnpm'" "install_pnpm_on_ubuntu"
        if [ ${#missing_deps[@]} -gt 0 ]; then
          echo -e "${RED}Deps missing: ${BOLD}$(IFS=' '; echo "${missing_deps[*]}")"
          echo -e "${RESET}Please install with following commands:"
          for cmd in "${install_commands[@]}"; do echo -e "    ${GREEN}$cmd${RESET}"; done
          exit 1
        else
          echo -e "✅ All system dependencies are installed."
        fi

  _install_tool:
    internal: true
    desc: "Internal: Downloads and installs a specified tool from a NuGet package."
    vars:
      name: '{{.name}}'
      version: '{{.version}}'
      url: '{{.url}}'
    cmds:
      - |
        echo "Installing {{.name}}..."
        mkdir -p {{.PATH_BIN}}
        tool_tmp_dir="{{.PATH_BUILD_ROOT}}/{{.name}}.staging"
        mkdir -p $tool_tmp_dir
        cd $tool_tmp_dir
        curl --silent -L "{{.url}}" -o "{{.name}}.zip"
        unzip "{{.name}}.zip" -d "package_{{.name}}"
        cp "package_{{.name}}/runtimes/linux-x64/native/{{.name}}" "{{.PATH_BIN}}/{{.name}}"
        chmod +x "{{.PATH_BIN}}/{{.name}}"
        rm -rf $tool_tmp_dir
        echo "{{.name}} installed successfully."
